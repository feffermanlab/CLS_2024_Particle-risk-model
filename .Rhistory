1, # column 26 office
2, # column 27 office - large
1, # column 28 small bathroom
1, # column 29 office
1 # column 30 office
)
Office_C <- c(
45,# room 1 - Hallway/lobby
46,# room 2 - Hallway/lobby
46, # room 3 - Large Common room
41,# room 4 - Hallway
27,# room 5 - Hallway
18,# room 6 - Hallway
45,# room 7 - Intermediate room
9,# room 8 - Hallway- small
9,# room 9 - Hallway to restrooms and stairway
10,# room 10 - Conference room - large
2,# room 11 - Storage room
8,# room 12 - Conference room - large
3,# room 13 - Office room
6,# room 14 - Conference room - small
3,# room 15 - Office room
3,# room 16 - Office room
2,# room 17 - Kitchenette
5,# room 18 - Large communal Office space
3,# room 19 - small communal Office space
1,# room 20 - Storage room
rep(3,11), # rooms 21-31 - Offices
4, # room 32 - Restroom
4, # room 33 - Restroom
1 # room 34 - Storage room
)
Movie_C <- c(
303, # Room 1 hallway
200, # Room 2 - Hallway
100, # Room 3 - Hallway
71, # Room 4 - Hallway
13, # Room 5 - Hallway
13, # Room 6 - Hallway
103, # Room 7 - Hallway
173, # Room 8 - Hallway
68, # Room 9 main room
3, # Room 10 Admin
1, # Room 11 - admin
2, # Room 12 - facilities management
1, # Room 13 - facilities management
10, # Room 14 - Kitchen
100, # Room 15 - Theater
2, # Room 16 - Storage room
102, # Room 17 - Theater
12, # Room 18 - restroom
127, # Room 19 - Theater
12, # Room 20 - restroom
1, # Room 21 - family bathroom
1, # Room 22 - cleaning
1, # Room 23 - cleaning
127, # Room 24 - Theater
1, # Room 25 - facilities
49, # Room 26 - Theater
49, # Room 27 - Theater
73, # Room 28 - Theater
1, # Room 29 Facilities
2, # Room 30 - storage
63, # Room 31 - Theater
2, # Room 32 - maintenance
12, # Room 33 - Employee room
1 # Room 34 - employee bathroom
)
University_C <- c(rep(1,5),# rooms 1-5 storage / facilities
12, # room 6 research lab
rep(3,4), # rooms 7-10 offices
10, # room 11 - building services / equipment
1, # room 12 - storage
rep(4,4), # rooms 13-16 research labs
rep(1,5), # rooms 17-21 research lab storage
1, # room 22 storage
2, # room 23 lab storage
1, # room 24 storage
1, # room 25 storage - facilities
2, # room 26 facilities
2, # room 27 facilities
rep(4,2), # rooms 28 and 29 - bathrooms
rep(1,2), # rooms 30 and 31 - bathroom storage
10, # room 32 large unused space - wharehouse?
2, # room 33 facilities
10, # room 34 - large facilities
51, # rooms 35 hallway
27,# room 36 hallway
15, # room 37 - small hallway outside elevator
12, # rooms 38-42 hallways
37,# room 39
17,# room 40
29,# room 41
49,# room 42
63, # room 43 - small hallway by stairs
51, # room 44 stair
8, # room 45 elevator
8, # room 46 elevator
63, # room 47 stair
1, # room 48 storage
4, # room 49 Teaching lab small room
1, # room 50 connecting room to offices/ small common room
2, # room 51 storage - teaching lab
80, # room 52 Entryway
2, # room 53 Building services (elevator?)
rep(1,7), # rooms 54-60 offices
30, # room 61 - small teaching lab
30, # room 62 large teaching lab
4, # room 63 small teaching lab
30, # room 64 large teaching lab
30, # room 65 medium teaching lab
2, # room 66 storage
4, # room 67 storage
50, # room 68
18, # room 69
rep(1,3), # rooms 70-72 storage/ building services
rep(4,2), # rooms 73 and 74 - bathrooms
1, # room 75 storage
rep(1,4), # rooms 76-79 small classrooms -- update -- i think they are offices
225, # room 80 large lecture hall
58,# room 81 - hallway
70,# room 82 - hallway
7,# room 83 - hallway
115,# room 84 - hallway
81, # room 85 smaller hallway to teaching labs
171,# room 86
131,# room 87
225,# room 88
8,# room 89
3, # room 90 small hallway to storage rooms
226, # room 91 hallway with common area
115, # room 92 hallway
176, # room 93 - stair way
1, # room 94 storage
1, # room 95 office
rep(1,9), # rooms 96-104 offices
rep(30,2), # rooms 105 and 106 small classroom
1, # room 107 small research room
18, # room 108 research lab
44, # room 109 research lab / desks
1,# room 110
1,# room 111
1,# room 112
4,# room 113
4,# room 114
2,# room 115
rep(1,2), # rooms 116 and 117 - small storage
rep(1,3), # rooms 118-120 facilities
16, # rooms 121 large research lab
8, # room 122
10,# room 123
1, # room 124
5, # room 125
rep(1,7), # rooms 126-132 offices
rep(4,2), # rooms 133 and 134 bathrooms
10, # room 135 small common area
rep(1,3), # rooms 136-138 small offices
40, # room 139 large conference room
1, # room 140 facilities
109, # rooms 141 hallway
107, # room 142 hallway
102, # room 143 hallway
4, # room 144 hallway
42,# room 145 hallway
10,# room 146 hallway
10,# room 147 hallway
12,# room 148 hallway
3,# room 149 hallway
36,# room 150 hallway
28,# room 151 hallway
38,# room 152 hallway
40, # room 153 hallway with common area
43, # room 154
24, # room 155
1, # room 156 facilities
rep(1,10), # room 157-166 offices
30, # room 167 large conference room
1, # room 168 research lab storage
18, # room 169 large research lab
37, # room 170 research desk/lab space
rep(1,6 ), # room 171 - 176 research storage
2, # room 177 large storage
16, # room 178 large research lab
rep(10,2), # room 179 and 180 classroom
rep(1,6), # rooms 181 - 186 storage rooms
rep(1,7), # rooms 187 - 193 offices
rep(4, 2), # rooms 194 and 195 bathrooms
1, # room 196 office
5, # room 197 admin open space
1, # room 198 office
5, # room 199 admin open space
rep(1,7), # room 200 - 206 office space
1, # room 207 storage
32, # room 208 hallway
60, # room 209
55, # room 210 small hallway
64, # room 211 hallway
25, # room 212 hallway
7, # room 213 hallway
6, # room 214 hallway
8, # room 215 hallway
3, # room 216 hallway
86,# room 217 hallway
4, # room 218 hallway
17, # room 219 hallway
13, # room 220 hallway
7, # room 221 hallway
18, # room 222 hallway
16, # room 223 hallway
58,# room 224 stairwell
109,# room 225 stairwell
32,# room 226 stairwell
115,# room 227 stairwell
43,# room 228 stairwell
7,# room 229 stairwell
106,# room 230 stairwell
86# room 231 stairwell
) #  vector of the carrying capacities for each room - people
small_bld_3_rooms_graph<- graph_from_adjacency_matrix(small_bld_3_rooms, mode = "undirected")
#take a look
plot(small_bld_3_rooms_graph)
church_graph<- graph_from_adjacency_matrix(church_adjacency_matrix, mode = "undirected")
#take a look
plot(church_graph)
Office_graph<- graph_from_adjacency_matrix(Office_adjacency_matrix, mode = "undirected")
plot(Office_graph)
Movie_graph<- graph_from_adjacency_matrix(Movie_adjacency_matrix, mode = "undirected")
University_graph<- graph_from_adjacency_matrix(University_adjacency_matrix, mode = "undirected")
UTK_colors_fun <- function(...) {
cols <- c(...)
if (is.null(cols))
return (UTK_colors_fun)
unname(UTK_colors[cols])
}
UTK_colors <- c(turq="#00746F",
orange ="#E65933",
dark_blue ="#006C93",
cream ="#F2F0E8",
medium_blue ="#517C96",
burgundy = "#8D2048",
purple ="#754A7E",
yellow = "#FED535",
grey = "#A7A9AC",
sage = "#579584",
skyblue= "#B9E1E2",
brown = "#705550",
pink = "#EE3E80",
green = "#ABC178",
lightblue = "#2197A9",
yellowgreen = "#EBEA64")
colors_to_use <- c("#44aa99","#ddcc77","#332288","#cc6677","#117733","#88ccee","#aa4499") #but we need 10 colors
V(church_graph)$capacity <- Church_C
V(church_graph)$Room <- seq(1:length(Church_C))
set.seed(154780)
church_network <- ggplot(church_graph, aes(x = x, y = y, xend = xend, yend = yend))+
geom_edges(color = "grey75")+
geom_nodes( color = UTK_colors_fun("turq"),aes(size = capacity))+
geom_nodetext_repel(aes(label=Room))+
theme_blank()+
scale_size_continuous(
name = "Room capacity",
breaks = seq(1, max(V(church_graph)$capacity), by = 50),  # Set custom breaks
limits = c(1, max(V(church_graph)$capacity)  )            # Define limits for the legend
)+
labs(title = "Network representation of a church")+
theme(plot.title.position = "panel",
plot.title = element_text(hjust=1)
)
church_network
#code to save figure
png(filename = "Figures/Church_network.png",units="in", width=6, height=4, res=300)
church_network
dev.off()
V(Office_graph)$capacity <- Office_C
V(Office_graph)$Room <- seq(1:length(Office_C))
set.seed(1544780)
Office_network <- ggplot(Office_graph, aes(x = x, y = y, xend = xend, yend = yend))+
geom_edges(color = "grey75")+
geom_nodes( color = UTK_colors_fun("turq"),aes(size = capacity))+
geom_nodetext_repel(aes(label=Room))+
theme_blank()+
scale_size_continuous(
name = "Room capacity",
breaks = seq(1, max(V(Office_graph)$capacity), by = 5),  # Set custom breaks
limits = c(1, max(V(Office_graph)$capacity)  )            # Define limits for the legend
)+
labs(title = "Network representation of an office")+
theme(plot.title.position = "panel",
plot.title = element_text(hjust=1)
)
Office_network
#code to save figure
png(filename = "Figures/Office_network.png",units="in", width=6, height=4, res=300)
Office_network
dev.off()
V(Movie_graph)$capacity <- Movie_C
V(Movie_graph)$Room <- seq(1:length(Movie_C))
set.seed(154780)
Movie_network <- ggplot(Movie_graph, aes(x = x, y = y, xend = xend, yend = yend))+
geom_edges(color = "grey75")+
geom_nodes( color = UTK_colors_fun("turq"),aes(size = capacity))+
geom_nodetext_repel(aes(label=Room))+
theme_blank()+
scale_size_continuous(
name = "Room capacity",
breaks = seq(1, max(V(Movie_graph)$capacity), by = 50),  # Set custom breaks
limits = c(1, max(V(Movie_graph)$capacity)  )            # Define limits for the legend
)+
labs(title = "Network representation of a movie theater")+
theme(plot.title.position = "panel",
plot.title = element_text(hjust=1)
)
Movie_network
#code to save figure
png(filename = "Figures/Movie_network.png",units="in", width=6, height=4, res=300)
Movie_network
dev.off()
V(University_graph)$capacity <- University_C
V(University_graph)$Room <- seq(1:length(University_C))
set.seed(154780)
University_network <- ggplot(University_graph, aes(x = x, y = y, xend = xend, yend = yend))+
geom_edges(color = "grey75")+
geom_nodes( color = UTK_colors_fun("turq"),aes(size = capacity))+
geom_nodetext_repel(aes(label=Room))+
theme_blank()+
scale_size_continuous(
name = "Room capacity",
breaks = seq(1, max(V(University_graph)$capacity), by = 50),  # Set custom breaks
limits = c(1, max(V(University_graph)$capacity)  )            # Define limits for the legend
)+
labs(title = "Network representation of a university building")+
theme(plot.title.position = "panel",
plot.title = element_text(hjust=1)
)
University_network
#code to save figure
png(filename = "Figures/University_network.png",units="in", width=6, height=4, res=300)
University_network
dev.off()
##### Model output ####
Max_Building_Capacity_Church <- sum(Church_C)
# how full do we want our building capacity to be
Adj_Max_Building_Capacity_Church <- round(Prop_full*Max_Building_Capacity_Church,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
##### Building setup ####
Max_Building_Capacity_small_bld <- sum(small_bld_3_rooms_C)
Max_Building_Capacity_Church <- sum(Church_C)
Max_Building_Capacity_Office <- sum(Office_C)
Max_Building_Capacity_Movie <- sum(Movie_C)
Max_Building_Capacity_University <- sum(University_C)
Prop_full <- 0.8 # how full do we want our building capacity to be
Adj_Max_Building_Capacity_small_bld <- round(Prop_full*Max_Building_Capacity_small_bld,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Church <- round(Prop_full*Max_Building_Capacity_Church,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Office <- round(Prop_full*Max_Building_Capacity_Office,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Movie <- round(Prop_full*Max_Building_Capacity_Movie,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_University <- round(Prop_full*Max_Building_Capacity_University,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
delt_small_bld <- Adj_Max_Building_Capacity_small_bld/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
Bld_setup_func_v2 <- function(Community_output,day, delt,N_rooms, C_x, N_total){
Building_ICs <- Community_output[day,] #Retrieves the number of S, I, and R individuals in the community at a particular day.
N_x  <- c(rep(0, N_rooms)) #initialize a vector
for (i in 1:length(C_x)) {
if (sum(N_x) >= N_total) break  # Stop if all individuals are distributed
# Maximum we can place in this room, constrained by remaining individuals and room capacity
max_for_room <- min(C_x[i], N_total - sum(N_x))
# Randomly assign a number between 0 and max_for_room
N_x[i] <- sample(0:max_for_room, 1)
}
# If after the first pass, there are still individuals left, distribute the remaining in a while loop
while (sum(N_x) < N_total) {
# Randomly select a room index
room_index <- sample(1:length(N_x), 1)
# Check if the selected room can accommodate more individuals
if (N_x[room_index] < C_x[room_index] && sum(N_x) < N_total) {
N_x[room_index] <- N_x[room_index] + 1
}
# Break if we've distributed all individuals or hit the building limit
if (sum(N_x) >= N_total || sum(N_x) >= N_total) {
break
}
}
#Now we need to find how many S, I, and R individuals we should have in the building based on the proportionality constant solved for above
Sb <- Community_output$S[day]*delt # number of susceptible in building
Ib <- Community_output$I[day]*delt # number of Infectious in building
Rb <- Community_output$R[day]*delt # number of Recovered in building
# calculate the proportion of S,I, and R that should be in the building
Sb_prop <- Sb/N_total
Ib_prop <- Ib/N_total
Rb_prop <- Rb/N_total
# we start with no particles in the building
P_x <- c(rep(0,N_rooms))
return(data.frame(Sb = Sb, Ib = Ib, Rb = Rb,Sb_prop = Sb_prop,Ib_prop = Ib_prop,Rb_prop= Ib_prop ,P=P_x, N_x = N_x))
}
#**Community model parameters**
#  #{r Community model parameters}
community_pop <- 100000 #pop size of the larger community
init_conds <- c(S = community_pop-1, I = 1, R = 0)
print(init_conds)
parms <- data.frame(bet =0.0000035 , gam = 1/21)
print(parms)
times <- seq(from = 1, to = 144, by = 1)
print(times)
##
#**Community modelfunction/equations**
# #{r communtiy model function}
SIR_community_model <- function(t, x, parms) {
S <- x[1]
I <- x[2]
R <- x[3]
with(parms, {
dS <- -bet*S*I
dI <- bet*S*I - gam*I
dR <- gam*I
dt <- c(dS,dI,dR)
return(list(dt))
})}
#**Community model output**
#
Community_output <- data.frame(lsoda(y = init_conds, func = SIR_community_model,times = times, parms=parms))
Community_output %>% pivot_longer(cols = !time) %>% arrange(desc(time))%>%
ggplot(aes(x=time,y =value, color = name))+geom_line()+
scale_color_manual(name=NULL,values=c("blue","red","purple"),breaks = c("S","I","R"))+
theme_classic()+
labs(x= "Time (days)", y = "Number of individuals")+ggtitle("Community outbreak of pathogen")
Small_bld_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_small_bld,N_rooms =length(small_bld_3_rooms_C),C_x = small_bld_3_rooms_C,N_total = Adj_Max_Building_Capacity_small_bld)
Small_bld_setup
Church_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_Church, N_rooms =length(Church_C),C_x = Church_C, N_total = Adj_Max_Building_Capacity_Church)
day <- 31
Small_bld_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_small_bld,N_rooms =length(small_bld_3_rooms_C),C_x = small_bld_3_rooms_C,N_total = Adj_Max_Building_Capacity_small_bld)
Prop_full <- 0.8 # how full do we want our building capacity to be
Adj_Max_Building_Capacity_small_bld <- round(Prop_full*Max_Building_Capacity_small_bld,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Church <- round(Prop_full*Max_Building_Capacity_Church,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Office <- round(Prop_full*Max_Building_Capacity_Office,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_Movie <- round(Prop_full*Max_Building_Capacity_Movie,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
Adj_Max_Building_Capacity_University <- round(Prop_full*Max_Building_Capacity_University,0) #Adjusted capacity - number of individuals that will be in the building such that building is at 'Prop_full' capacity
delt_small_bld <- Adj_Max_Building_Capacity_small_bld/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
delt_Church <- Adj_Max_Building_Capacity_Church/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
delt_Office <- Adj_Max_Building_Capacity_Office/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
delt_Movie <- Adj_Max_Building_Capacity_Movie/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
delt_University <- Adj_Max_Building_Capacity_University/community_pop # proportionality constant ( what proportion of individuals from the community are in the building of interest)
day <- 31
Small_bld_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_small_bld,N_rooms =length(small_bld_3_rooms_C),C_x = small_bld_3_rooms_C,N_total = Adj_Max_Building_Capacity_small_bld)
Small_bld_setup
Church_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_Church, N_rooms =length(Church_C),C_x = Church_C, N_total = Adj_Max_Building_Capacity_Church)
Office_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_Office, N_rooms =length(Office_C),C_x = Office_C, N_total = Adj_Max_Building_Capacity_Office)
Movie_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_Movie, N_rooms =length(Movie_C),C_x = Movie_C, N_total = Adj_Max_Building_Capacity_Movie)
University_setup <- Bld_setup_func_v2(Community_output = Community_output,day = day,delt = delt_University, N_rooms =length(University_C),C_x = University_C, N_total = Adj_Max_Building_Capacity_University)
Church_data <- read.table(file = "Data/Church_output_Nov24_parms1.text",sep = " ")
Church_data_clean <- Church_data%>% pivot_longer(cols = !time,
names_to = c("State", "Room"),
names_pattern = "([A-Za-z]+)(\\d+)",
values_to = "Number")
parms <-data.frame(s=99000,a=396, d=1.81,bet_bar = 509.7004, bet_hat =67320)
# s = shedding, a = absorption, d = decay, lam = scalar for room capacities
#N_b <- Adj_Max_Building_Capacity #Building population size
Maxtime <- 24*3
times <- seq(from = 0, to = Maxtime, by = 0.2)
m <- 5 # number of equations per room
#
Church_data <- read.table(file = "Data/Church_output_Nov24_parms1.text",sep = " ")
Church_data_clean <- Church_data%>% pivot_longer(cols = !time,
names_to = c("State", "Room"),
names_pattern = "([A-Za-z]+)(\\d+)",
values_to = "Number")
Church_data_ratios <- Church_data_clean %>% pivot_wider(names_from = c(State),values_from = c(Number)) %>% group_by(time,Room)  %>%
mutate(N_x = (S+I+R)*Adj_Max_Building_Capacity_Church) #%>% group_by(time) %>% summarise(Total_prop=sum(N_x), x =sum(x)*Adj_Max_Building_Capacity_Church)
Church_data_clean %>% filter(State == "P") %>%
group_by(State,Room)%>%
ggplot( aes(x=time, y = Number, group =Room, color = Room))+
geom_line()+theme_classic()+
labs(x = "Time (hours)", y= "Number")+ggtitle("Number of infectious particles")
Church_data_clean %>% filter(State == "N_x") %>%
group_by(State,Room)%>%
ggplot( aes(x=time, y = Number, group =Room, color = Room))+
geom_line()+theme_classic()+
labs(x = "Time (hours)", y= "Number")+ggtitle("Number of people")
Church_data_clean <- Church_data %>% pivot_longer(cols = !time,
names_to = c("State", "Room"),
names_pattern = "(P|N_x)(\\d+)",
values_to = "Number")
Church_data_clean %>% filter(State == "P") %>%
group_by(State,Room)%>%
ggplot( aes(x=time, y = Number, group =Room, color = Room))+
geom_line()+theme_classic()+
labs(x = "Time (hours)", y= "Number")+ggtitle("Number of infectious particles")
Church_data_clean %>% filter(State == "N_x") %>%
group_by(State,Room)%>%
ggplot( aes(x=time, y = Number, group =Room, color = Room))+
geom_line()+theme_classic()+
labs(x = "Time (hours)", y= "Number")+ggtitle("Number of people")
Church_data_clean %>% filter(State == "N_x") %>% ungroup() %>% group_by(time) %>% summarise(Total_prop=sum(Number))%>%
ggplot(aes(x=time, y=Total_prop))+geom_line()+
labs(x = "Time (hours)", y= "Proportion of individuals")+ggtitle("Proportion of individuals in rooms within a building")
temp_Church <- Church_data_clean
temp_C_x_Church <- data.frame(Room = as.character(seq(1:length(Church_C))),C_x = c(Church_C))
temp_data_Church<- left_join(temp_Church,temp_C_x_Church, by = "Room")
ratio_data_Church <- temp_data_Church %>% pivot_wider(names_from = c(State),values_from = c(Number)) %>%
group_by(time, Room)%>%mutate(s =(parms$s),a = parms$a,bet_bar = parms$bet_bar,bet_hat= parms$bet_hat, Ib_prop = Small_bld_setup$Ib_prop[1],Numerator = s*N_x*Ib_prop*(C_x*bet_bar)*bet_hat , Denominator =(a*N_x*P*(P)), ratio = Numerator/Denominator )
#temp_data %>% pivot_wider(names_from = c(State),values_from = c(Number)) %>%
#+   group_by(time, Room)%>%mutate(s =(parms$s),a = parms$a,bet_bar = parms$bet_bar,bet_hat= parms$bet_hat, Ib_prop = Small_bld_setup$Ib_prop[1],shed = s*N_x*Ib_prop*C_x*bet_bar , Denominator =(a*P), ratio = shed/Denominator )
#> #(parms$s*N_x*Small_bld_setup$Ib_prop[1]*N_x*small_bld_3_rooms_C[Room]*parms$lam)
#(parms$s*N_x*Small_bld_setup$Ib_prop[1]*N_x*small_bld_3_rooms_C[Room]*parms$lam)
ggplot(ratio_data_Church, aes(x = time, y = ratio, color = Room))+geom_line()
temp_Church <- Church_data_clean
temp_C_x_Church <- data.frame(Room = as.character(seq(1:length(Church_C))),C_x = c(Church_C))
temp_data_Church<- left_join(temp_Church,temp_C_x_Church, by = "Room")
ratio_data_Church <- temp_data_Church %>% pivot_wider(names_from = c(State),values_from = c(Number)) %>%
group_by(time, Room)%>%mutate(s =(parms$s),a = parms$a,bet_bar = parms$bet_bar,bet_hat= parms$bet_hat, Ib_prop = Church_setup$Ib_prop[1],Numerator = s*N_x*Ib_prop, Denominator =(a*N_x*(P/(C_x*bet_bar))*(P/bet_hat)), ratio = Numerator/Denominator )
#temp_data %>% pivot_wider(names_from = c(State),values_from = c(Number)) %>%
#+   group_by(time, Room)%>%mutate(s =(parms$s),a = parms$a,bet_bar = parms$bet_bar,bet_hat= parms$bet_hat, Ib_prop = Small_bld_setup$Ib_prop[1],shed = s*N_x*Ib_prop*C_x*bet_bar , Denominator =(a*P), ratio = shed/Denominator )
#> #(parms$s*N_x*Small_bld_setup$Ib_prop[1]*N_x*small_bld_3_rooms_C[Room]*parms$lam)
#(parms$s*N_x*Small_bld_setup$Ib_prop[1]*N_x*small_bld_3_rooms_C[Room]*parms$lam)
ggplot(ratio_data_Church, aes(x = time, y = ratio, color = Room))+geom_line()
View(ratio_data_Church)
